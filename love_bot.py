import os
from telegram import Update, InputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes
)

TOKEN = os.getenv("BOT_TOKEN")

QUESTIONS = [
    {
        "type": "choice",
        "question": "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –∫–æ–≥–¥–∞ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è? üòâ",
        "options": ["–û–±–Ω–∏–º–∞—à–∫–∏", "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", "–û—á–µ–Ω—å –º–Ω–æ–≥–æ –≥—É–ª—è—Ç—å", "–°–º–æ—Ç—Ä–µ—Ç—å –≤ –≥–ª–∞–∑–∞"],
        "responses": {
            "–æ–±–Ω–∏–º–∞—à–∫–∏": "–Ø –±—ã —Ç–æ–∂–µ –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–∞ —Ç–µ–±—è —Å–µ–π—á–∞—Å –æ–±–Ω—è—Ç—å. –£—Ç–æ–Ω—É—Ç—å –≤ —Ç–µ–ø–ª–µ –∏ —É—é—Ç–µü´Ç",
            "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏": "–ú—ã –º–æ–∂–µ–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —á–∞—Å–∞–º–∏ –Ω–∞–ø—Ä–æ–ª–µ—Ç, –Ω–æ –∏ –º–æ–ª—á–∞—Ç—å –Ω–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æü§´",
            "–æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≥—É–ª—è—Ç—å": "–ì—É–ª—è—Ç—å —Ç–∞–∫, —á—Ç–æ –Ω–æ–≥–∏ –æ—Ç–≤–∞–ª–∏–≤–∞—é—Ç—Å—è. –¢–∞–∫–æ–µ –æ–¥–æ–±—Ä—è–µ–ºüòÉ",
            "—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –≥–ª–∞–∑–∞": "–î–∞–≤–Ω–æ —è –∏—Ö –Ω–µ –≤–∏–¥–µ–ª–∞, –Ω–∞–¥–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—åüíî"
        }
    },
    {
        "type": "quiz",
        "question": "–ü–æ–º–Ω–∏—à—å –Ω–∞—à—É –ø–æ–µ–∑–¥–∫—É –≤ –ö–∞–∑–∞–Ω—å? –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª—Å—è –æ—Ç–µ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?",
        "options": ["–¢–∞—Ç–∞—Ä—Å–∫–∞—è —Å–ª–æ–±–æ–¥–∞", "–ú–∏—Ä–∞–∂", "–ö–æ—Ä–æ–Ω–∞", "–ö—Ä–∏—Å—Ç–∞–ª–ª"],
        "answer": "–ö–æ—Ä–æ–Ω–∞"
    },
    {
        "type": "open",
        "question": "–ö–∞–∫–æ–µ —Å–∞–º–æ–µ –±–µ–∑—É–º–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–µ—Ä–µ–∂–∏—Ç—å —Å–æ –º–Ω–æ–π? üåç"
    },
    {
        "type": "open",
        "question": "–ù–∞–∑–æ–≤–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ä–∞–¥—É—é—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–∫—Ä–æ–º–µ –º–µ–Ω—è, —è –∏ —Ç–∞–∫ –∑–Ω–∞—é) üòâ"
    },
    {
        "type": "photo",
        "question": "–°–¥–µ–ª–∞–π –º–∏–ª–æ–µ —Å–µ–ª—Ñ–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ üì∏"
    },
    {
        "type": "final",
        "question": "–û—Ç–ª–∏—á–Ω–æ, –∫–≤–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ‚ú®\n\n–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¢–û–ß–ù–û –±—É–¥–µ—à—å –¥–æ–º–∞ –∏ –∞–¥—Ä–µ—Å. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è‚Ä¶ —Å—é—Ä–ø—Ä–∏–∑–∞! üéÇ"
    }
]

user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_states[user_id] = 0
    await update.message.reply_text(
        "–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º—ã–π! üéâ –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ —Ç–µ–±–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–≤–µ—Å—Ç. –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚ú®"
    )
    await ask_question(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    message = update.message
    text = message.text or ""
    photo = message.photo[-1].file_id if message.photo else None

    if user_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üéâ")
        return

    step = user_states[user_id]
    if step >= len(QUESTIONS):
        await update.message.reply_text("–ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ")
        return

    q = QUESTIONS[step]
    response = ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if q["type"] == "choice":
        answer = text.strip().lower()
        response = q["responses"].get(answer, "–¢—ã –≤—ã–±—Ä–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ü•∞")

    elif q["type"] == "quiz":
        correct = q["answer"].strip().lower()
        if text.strip().lower() == correct:
            response = "–£–º–Ω–∏—á–∫–∞! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üòç"
        else:
            response = f"–•–∏—Ö–∏, –Ω–µ —Å–æ–≤—Å–µ–º. –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ ‚Äî {q['answer']} üòâ"

    elif q["type"] == "photo":
        if photo:
            response = "–£–ª—ã–±–∫–∞ —Ç–µ–±–µ –æ—á–µ–Ω—å –∏–¥—ë—Ç üòò"
        else:
            await message.reply_text("–ñ–¥—É —Ñ–æ—Ç–æ! üì∑")
            return

    elif q["type"] == "final":
        response = "–ó–∞–ø–∏—Å–∞–ª–∞! üéÇ –û–∂–∏–¥–∞–π —Å—é—Ä–ø—Ä–∏–∑–∞ ‚ù§Ô∏è"

    else:  # open
        response = "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –•–æ—á—É —ç—Ç–æ —Å —Ç–æ–±–æ–π –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å üòå"

    # –û—Ç–≤–µ—á–∞–µ–º
    await update.message.reply_text(response, reply_markup=ReplyKeyboardRemove())

    # –í—ã–¥–∞–µ–º –±–∏–ª–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    ticket_path = f"tickets/ticket{step+1}.jpg"
    if os.path.exists(ticket_path):
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=InputFile(ticket_path),
            caption=f"üéü –ë–∏–ª–µ—Ç ‚Ññ{step+1} –≤—ã–¥–∞–Ω!"
        )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user_states[user_id] += 1
    if user_states[user_id] < len(QUESTIONS):
        await ask_question(update, context)
    else:
        await update.message.reply_text("–¢—ã –ø—Ä–æ—à—ë–ª –≤–µ—Å—å –∫–≤–µ—Å—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —ç–º–æ—Ü–∏–∏ üíñ")

async def ask_question(update_or_context, context):
    user_id = str(update_or_context.effective_user.id)
    step = user_states.get(user_id, 0)
    if step >= len(QUESTIONS):
        return
    q = QUESTIONS[step]

    if q["type"] in ["choice", "quiz"]:
        keyboard = [[KeyboardButton(opt)] for opt in q["options"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=q["question"], reply_markup=markup)
    else:
        await context.bot.send_message(chat_id=user_id, text=q["question"], reply_markup=ReplyKeyboardRemove())

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))
    app.run_polling()
