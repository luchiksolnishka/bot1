import os
import json
from datetime import datetime
from telegram import Update, InputFile, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes
)

TOKEN = os.getenv("BOT_TOKEN")
QUESTIONS = [
    {
        "type": "choice",
        "question": "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –∫–æ–≥–¥–∞ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è? üòâ",
        "options": ["–û–±–Ω–∏–º–∞—à–∫–∏", "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", "–û—á–µ–Ω—å –º–Ω–æ–≥–æ –≥—É–ª—è—Ç—å", "–°–º–æ—Ç—Ä–µ—Ç—å –≤ –≥–ª–∞–∑–∞"]
    },
    {
        "type": "quiz",
        "question": "–ü–æ–º–Ω–∏—à—å –Ω–∞—à—É –ø–æ–µ–∑–¥–∫—É –≤ –ö–∞–∑–∞–Ω—å? –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª—Å—è –æ—Ç–µ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?",
        "options": ["–¢–∞—Ç–∞—Ä—Å–∫–∞—è —Å–ª–æ–±–æ–¥–∞", "–ú–∏—Ä–∞–∂", "–ö–æ—Ä–æ–Ω–∞", "–ö—Ä–∏—Å—Ç–∞–ª–ª"],
        "answer": "–ö–æ—Ä–æ–Ω–∞"
    },
    {
        "type": "open",
        "question": "–ö–∞–∫–æ–µ —Å–∞–º–æ–µ –±–µ–∑—É–º–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–µ—Ä–µ–∂–∏—Ç—å —Å–æ –º–Ω–æ–π? üåç"
    },
    {
        "type": "open",
        "question": "–ù–∞–∑–æ–≤–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ä–∞–¥—É—é—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–∫—Ä–æ–º–µ –º–µ–Ω—è, —è –∏ —Ç–∞–∫ –∑–Ω–∞—é) üòâ"
    },
    {
        "type": "photo",
        "question": "–°–¥–µ–ª–∞–π –º–∏–ª–æ–µ —Å–µ–ª—Ñ–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ üì∏"
    },
    {
        "type": "final",
        "question": "–û—Ç–ª–∏—á–Ω–æ, –∫–≤–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ‚ú®\n\n–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¢–û–ß–ù–û –±—É–¥–µ—à—å –¥–æ–º–∞ –∏ –∞–¥—Ä–µ—Å. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è‚Ä¶ —Å—é—Ä–ø—Ä–∏–∑–∞! üéÇ"
    }
]

user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_states[user_id] = -1
    await update.message.reply_text("–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º—ã–π! üéâ –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª(–∞) —Ç–µ–±–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–≤–µ—Å—Ç. –ì–æ—Ç–æ–≤? –ù–∞–ø–∏—à–∏ '–î–∞' ‚ú®")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text or ""
    photo_id = update.message.photo[-1].file_id if update.message.photo else None

    if user_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üéâ")
        return

    step = user_states[user_id]

    if step == -1:
        if text.lower() in ["–¥–∞", "–∫–æ–Ω–µ—á–Ω–æ"]:
            user_states[user_id] = 0
            await ask_question(update, context)
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ '–î–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üíñ")
        return

    if step >= len(QUESTIONS):
        await update.message.reply_text("–ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ")
        return

    q = QUESTIONS[step]

    if q["type"] == "quiz":
        if text.strip().lower() == q["answer"].lower():
            await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üòò")
        else:
            await update.message.reply_text(f"–•–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {q['answer']} üòâ")
    elif q["type"] == "photo":
        await update.message.reply_text("–£–ª—ã–±–∫–∞ –¥–Ω—è –ø—Ä–∏–Ω—è—Ç–∞! üì∏")
    elif q["type"] == "final":
        await update.message.reply_text("–í—Å–µ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Ñ–æ—Ç–æ ‚Äî —ç—Ç–æ —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ üíå –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–µ–º —Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ–∂–∏–¥–∞–π —Å—é—Ä–ø—Ä–∏–∑‚Ä¶ üéÅ")
        user_states[user_id] = len(QUESTIONS)
        return
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! üìù")

    ticket_path = f"tickets/ticket{step + 1}.jpg"
    if os.path.exists(ticket_path):
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(ticket_path), caption=f"üéü –ë–∏–ª–µ—Ç ‚Ññ{step+1} –≤—ã–¥–∞–Ω!")

    user_states[user_id] += 1
    if user_states[user_id] < len(QUESTIONS):
        await ask_question(update, context)

async def ask_question(update_or_context, context):
    user_id = str(update_or_context.effective_user.id)
    step = user_states.get(user_id, 0)
    if step >= len(QUESTIONS):
        return
    q = QUESTIONS[step]
    if q["type"] in ["choice", "quiz"]:
        keyboard = [[KeyboardButton(opt)] for opt in q["options"]]
        markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=q["question"], reply_markup=markup)
    else:
        await context.bot.send_message(chat_id=user_id, text=q["question"])

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏‚ù§Ô∏è")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(MessageHandler(filters.ALL, handle_message))
    app.run_polling()
