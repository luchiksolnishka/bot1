import os
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes
)

TOKEN = os.getenv("BOT_TOKEN")

QUESTIONS = [
    "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –∫–æ–≥–¥–∞ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è? üòâ",
    "–ü–æ–º–Ω–∏—à—å –Ω–∞—à—É –ø–æ–µ–∑–¥–∫—É –≤ –ö–∞–∑–∞–Ω—å? –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª—Å—è –æ—Ç–µ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?",
    "–ö–∞–∫–æ–µ —Å–∞–º–æ–µ –±–µ–∑—É–º–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–µ—Ä–µ–∂–∏—Ç—å —Å–æ –º–Ω–æ–π? üåç",
    "–ù–∞–∑–æ–≤–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ä–∞–¥—É—é—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–∫—Ä–æ–º–µ –º–µ–Ω—è, —è –∏ —Ç–∞–∫ –∑–Ω–∞—é) üòâ",
    "–°–¥–µ–ª–∞–π –º–∏–ª–æ–µ —Å–µ–ª—Ñ–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ üì∏",
    "–û—Ç–ª–∏—á–Ω–æ, –∫–≤–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ‚ú®\n\n–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¢–û–ß–ù–û –±—É–¥–µ—à—å –¥–æ–º–∞ –∏ –∞–¥—Ä–µ—Å. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è‚Ä¶ —Å—é—Ä–ø—Ä–∏–∑–∞! üéÇ"
]

user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_states[user_id] = 0
    await update.message.reply_text("–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º—ã–π! üéâ –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ —Ç–µ–±–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–≤–µ—Å—Ç. –ì–æ—Ç–æ–≤? –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚ú®")
    await send_question(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª /start
    if user_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üéâ")
        return

    step = user_states[user_id]

    # –í—ã–¥–∞–µ–º –±–∏–ª–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    ticket_path = f"tickets/ticket{step+1}.jpg"
    if os.path.exists(ticket_path):
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=InputFile(ticket_path),
            caption=f"üéü –ë–∏–ª–µ—Ç ‚Ññ{step+1} –≤—ã–¥–∞–Ω!"
        )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_states[user_id] += 1
    if user_states[user_id] < len(QUESTIONS):
        await send_question(update, context)
    else:
        await update.message.reply_text("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ üíñ")

async def send_question(update_or_context, context):
    user_id = str(update_or_context.effective_user.id)
    step = user_states.get(user_id, 0)
    if step < len(QUESTIONS):
        question = QUESTIONS[step]
        await context.bot.send_message(chat_id=user_id, text=question)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))
    app.run_polling()
