from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes,
    ConversationHandler
)
import os

TOKEN = os.getenv("BOT_TOKEN")
START, QUESTION = range(2)

QUESTIONS = [
    {"type": "fact", "question": "–ì–¥–µ –±—ã–ª–æ –Ω–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ?", "answer": "–ø–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ"},
    {"type": "open", "question": "–ù–∞–∑–æ–≤–∏ –º–æ—é —Å–∞–º—É—é —Å–º–µ—à–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É?"},
]

user_progress = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_progress[user_id] = 0
    await update.message.reply_text("–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º—ã–π! üéâ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é? –ù–∞–ø–∏—à–∏ '–î–∞' ‚ú®")
    return START

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() in ["–¥–∞", "–∫–æ–Ω–µ—á–Ω–æ"]:
        return await ask_question(update, context)
    await update.message.reply_text("–û—Ç–≤–µ—Ç—å '–î–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ü•∞")
    return START

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    step = user_progress.get(user_id, 0)
    if step >= len(QUESTIONS):
        await update.message.reply_text("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ")
        return ConversationHandler.END
    q = QUESTIONS[step]
    await update.message.reply_text(q["question"])
    return QUESTION

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    step = user_progress.get(user_id, 0)
    q = QUESTIONS[step]
    text = update.message.text or ""

    if q["type"] == "fact":
        if text.lower() == q["answer"].lower():
            await update.message.reply_text("–í–µ—Ä–Ω–æ! üòò")
        else:
            await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {q['answer']} üòâ")
    elif q["type"] == "open":
        await update.message.reply_text("–ó–∞–ø–æ–º–Ω—é —ç—Ç–æ ‚ù§Ô∏è")

    ticket_number = step + 1
    ticket_path = f"tickets/ticket_{ticket_number}.jpg"
    if os.path.exists(ticket_path):
        await update.message.reply_photo(InputFile(ticket_path), caption=f"üéü –ë–∏–ª–µ—Ç ‚Ññ{ticket_number}\n–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π üíå")

    user_progress[user_id] = step + 1
    return await ask_question(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∫–∞ ‚ù§Ô∏è")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start)],
            QUESTION: [MessageHandler(filters.ALL, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()