from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes,
    ConversationHandler
)
import os

TOKEN = os.getenv("BOT_TOKEN")
START, QUESTION = range(2)

QUESTIONS = [
    {"type": "fact", "question": "–ì–¥–µ –±—ã–ª–æ –Ω–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ?", "answer": "–ø–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ"},
    {"type": "open", "question": "–ù–∞–∑–æ–≤–∏ –º–æ—é —Å–∞–º—É—é —Å–º–µ—à–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É?"},
    {"type": "open", "question": "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π?"},
    {"type": "open", "question": "–ß—Ç–æ —Ä–∞–¥—É–µ—Ç —Ç–µ–±—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–∫—Ä–æ–º–µ –º–µ–Ω—è üòò)?"},
    {"type": "open", "question": "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –±—É–¥–µ—à—å —Å–µ–≥–æ–¥–Ω—è –¥–æ–º–∞? –ù–∞–ø–∏—à–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å —ç—Ç–æ –í–∞–ª–µ!"}
]

user_progress = {}

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_progress[user_id] = 0
    await update.message.reply_text("–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º—ã–π! üéâ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é? –ù–∞–ø–∏—à–∏ '–î–∞' ‚ú®")
    return START

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() in ["–¥–∞", "–∫–æ–Ω–µ—á–Ω–æ"]:
        return await ask_question(update, context)
    await update.message.reply_text("–û—Ç–≤–µ—Ç—å '–î–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ü•∞")
    return START

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    step = user_progress.get(user_id, 0)
    if step >= len(QUESTIONS):
        await update.message.reply_text("üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤–µ—Å—å –∫–≤–µ—Å—Ç! –õ—é–±–ª—é —Ç–µ–±—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ ‚ù§Ô∏è")
        return ConversationHandler.END
    q = QUESTIONS[step]
    await update.message.reply_text(q["question"])
    return QUESTION

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    step = user_progress.get(user_id, 0)
    q = QUESTIONS[step]
    text = update.message.text or ""

    if q["type"] == "fact":
        if text.lower().strip() == q["answer"].lower().strip():
            await update.message.reply_text("–í–µ—Ä–Ω–æ! üòò")
        else:
            await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {q['answer']} üòâ")
    elif q["type"] == "open":
        await update.message.reply_text("–ó–∞–ø–æ–º–Ω—é —ç—Ç–æ ‚ù§Ô∏è")

    ticket_number = step + 1
    ticket_path = os.path.join(BASE_DIR, "tickets", f"ticket_{ticket_number}.jpg")

    print(f"[DEBUG] –ü—É—Ç—å –∫ –±–∏–ª–µ—Ç—É: {ticket_path}, –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(ticket_path)}")

    if os.path.exists(ticket_path):
        try:
            await update.message.reply_photo(
                InputFile(ticket_path),
                caption=f"üéü –ë–∏–ª–µ—Ç ‚Ññ{ticket_number}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ ‚Äî –ø–æ –≤–∑–∞–∏–º–Ω–æ–π –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ üíå"
            )
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
    else:
        await update.message.reply_text(f"(‚ùó) –ë–∏–ª–µ—Ç ‚Ññ{ticket_number} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–∞–ø–∫—É 'tickets'")

    user_progress[user_id] = step + 1
    return await ask_question(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∫–∞ ‚ù§Ô∏è")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start)],
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
